<?xml version="1.0"?>
<launch>
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find gazebo_senai)/config/config.rviz" output="screen"/>

  <!-- Some general parameters -->
	<param name="use_sim_time" value="true" />
	<rosparam file="$(find gazebo_senai)/param/ros.yaml"/>

	<!-- Start the Operator to control the simulated robot -->
	<!-- <node name="Operator" pkg="nav2d_operator" type="operator" >
		<remap from="scan" to="base_scan"/>
		<rosparam file="$(find gazebo_senai)/param/operator.yaml"/>
		<rosparam file="$(find gazebo_senai)/param/costmap.yaml" ns="local_map" />
	</node> -->

	<!-- Start Mapper to genreate map from laser scans -->
	<!-- <node name="Mapper" pkg="nav2d_karto" type="mapper">
		<remap from="scan" to="base_scan"/>
		<rosparam file="$(find gazebo_senai)/param/mapper.yaml"/>
	</node> -->

	<!-- Start the Navigator to move the robot autonomously -->
	<node name="Navigator" pkg="nav2d_navigator" type="navigator">
		<rosparam file="$(find gazebo_senai)/param/navigator.yaml"/>
	</node>

	<node name="GetMap" pkg="nav2d_navigator" type="get_map_client" />
	<node name="Explore" pkg="nav2d_navigator" type="explore_client" />
	<node name="SetGoal" pkg="nav2d_navigator" type="set_goal_client" />

	<!-- Start the joystick-driver and remote-controller for operation-->
	<!-- <node name="Joystick" pkg="joy" type="joy_node" />
	<node name="Remote" pkg="nav2d_remote" type="remote_joy" /> -->

  <node pkg="gmapping" type="slam_gmapping" name="slam_gmapping">
    <!-- <rosparam file="$(find challenge_husky)/param/mapper.yaml"/> -->
    <rosparam>
      odom_frame: odom
      base_frame: base_link
      map_frame: map
      map_update_interval: 0.5 # Publish new map
      maxUrange: 110 # Should be just less than sensor range
      maxRange: 140 # Should be just greater than sensor range
      particles: 100 # Increased from 80
      # Update frequencies
      linearUpdate: 0.3
      angularUpdate: 0.5
      temporalUpdate: 2.0
      resampleThreshold: 0.5
      # Initial Map Size
      xmin: -100.0
      ymin: -100.0
      xmax: 100.0
      ymax: 100.0
      delta: 0.05
      # All default
      sigma: 0.05
      kernelSize: 1
      lstep: 0.05
      astep: 0.05
      iterations: 5
      lsigma: 0.075
      ogain: 3.0
      lskip: 0
      llsamplerange: 0.01
      llsamplestep: 0.01
      lasamplerange: 0.005
      lasamplestep: 0.005
    </rosparam>
  </node>

  <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan">
    <remap from="cloud_in" to="/velodyne_points"/>
    <rosparam>
      target_frame: velodyne # Leave disabled to output scan in pointcloud frame
      transform_tolerance: 0.01
      min_height: -0.4
      <!-- max_height: 1.0 -->
      <!-- angle_min: -1.5708 # -M_PI/2
      angle_max: 1.5708 # M_PI/2
      angle_increment: 0.0087 # M_PI/360.0
      scan_time: 0.3333
      range_min: 0.45
      range_max: 50.0
      use_inf: true
      inf_epsilon: 1.0 -->
      # Concurrency level, affects number of pointclouds queued for processing and number of threads used
      # 0 : Detect number of cores
      # 1 : Single threaded
      # 2->inf : Parallelism level
      concurrency_level: 0
    </rosparam>
  </node>

  <!-- - Run Move Base   -->
  <include file="$(find husky_navigation)/launch/move_base.launch">
    <arg name="no_static_map" value="true"/>
  </include>

  <node pkg="scripts" name="detectObject" type="detectObject.py" output="screen"> </node>

  <!-- <node pkg="scripts" name="camera" type="camera.py" output="screen"> </node> -->

</launch>